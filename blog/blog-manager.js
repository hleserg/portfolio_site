// –ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–≥–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
class BlogPageManager {
    constructor() {
        this.articles = [];
        this.filteredArticles = [];
        this.currentPage = 1;
        this.articlesPerPage = 6; // –ë–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        this.totalPages = 1;
        this.currentCategory = 'all';
        this.currentSearch = '';
    }

    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–≥–∞...');
        this.loadArticles();
        this.filterArticles();
        this.renderBlog();
        this.setupEventListeners();
        this.updateStats();
    }

    // –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π (–¥–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ —Å—é–¥–∞)
    loadArticles() {
        this.articles = [
            {
                title: '–¢–æ–ø-5 —Å–ø–æ—Å–æ–±–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–°: –æ—Ç REST API –¥–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î',
                date: new Date(2025, 7, 24), // 24 –∞–≤–≥—É—Å—Ç–∞ 2025 (–º–µ—Å—è—Ü—ã —Å 0)
                slug: 'top-5-sposobov-integracii-1c',
                excerpt: '–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 1–° —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏. REST API, SOAP, —Ñ–∞–π–ª–æ–≤—ã–π –æ–±–º–µ–Ω, COM-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ë–î ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.',
                readTime: '25 –º–∏–Ω',
                tags: ['1–° –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', 'REST API', 'SOAP', 'COM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'],
                category: 'integration',
                featured: true
            },
            // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Å—Ç–∞—Ç–µ–π –≤ —Å—Ç–∏–ª–µ –±–ª–æ–∫–∞ "–ö–æ–¥"
            {
                title: '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                date: new Date(2025, 8, 6),
                slug: '#',
                excerpt: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–°.',
                readTime: '~ –º–∏–Ω',
                tags: ['–°–∫–æ—Ä–æ', '1–°', '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
                category: 'integration',
                isPlaceholder: true
            },
            {
                title: '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                date: new Date(2025, 8, 20),
                slug: '#',
                excerpt: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–°.',
                readTime: '~ –º–∏–Ω',
                tags: ['–°–∫–æ—Ä–æ', '1–°', '–ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
                category: 'mobile',
                isPlaceholder: true
            },
            {
                title: '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                date: new Date(2025, 9, 4),
                slug: '#',
                excerpt: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–°.',
                readTime: '~ –º–∏–Ω',
                tags: ['–°–∫–æ—Ä–æ', '1–°', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
                category: 'automation',
                isPlaceholder: true
            },
            {
                title: '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                date: new Date(2025, 9, 18),
                slug: '#',
                excerpt: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–°.',
                readTime: '~ –º–∏–Ω',
                tags: ['–°–∫–æ—Ä–æ', '1–°', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
                category: 'analytics',
                isPlaceholder: true
            },
            {
                title: '–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
                date: new Date(2025, 10, 1),
                slug: '#',
                excerpt: '–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –ø–æ–ª–µ–∑–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1–°.',
                readTime: '~ –º–∏–Ω',
                tags: ['–°–∫–æ—Ä–æ', '1–°', '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
                category: 'automation',
                isPlaceholder: true
            }
        ];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã), –ø–æ—Ç–æ–º –∑–∞–≥–ª—É—à–∫–∏ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã)
        this.articles.sort((a, b) => {
            // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç–∞—Ç—å—è - –∑–∞–≥–ª—É—à–∫–∞, –∞ –¥—Ä—É–≥–∞—è - –Ω–µ—Ç
            if (a.isPlaceholder && !b.isPlaceholder) return 1;  // –∑–∞–≥–ª—É—à–∫–∞ –∏–¥–µ—Ç –ø–æ—Å–ª–µ —Ä–µ–∞–ª—å–Ω–æ–π
            if (!a.isPlaceholder && b.isPlaceholder) return -1; // —Ä–µ–∞–ª—å–Ω–∞—è –∏–¥–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–≥–ª—É—à–∫–æ–π
            
            // –ï—Å–ª–∏ –æ–±–µ —Å—Ç–∞—Ç—å–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ (—Ä–µ–∞–ª—å–Ω—ã–µ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏)
            if (!a.isPlaceholder && !b.isPlaceholder) {
                // –†–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
                return b.date - a.date;
            } else {
                // –ó–∞–≥–ª—É—à–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã
                return a.date - b.date;
            }
        });
        
        console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${this.articles.length}`);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π
    filterArticles() {
        this.filteredArticles = this.articles.filter(article => {
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            const categoryMatch = this.currentCategory === 'all' || article.category === this.currentCategory;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
            const searchMatch = this.currentSearch === '' || 
                article.title.toLowerCase().includes(this.currentSearch.toLowerCase()) ||
                article.excerpt.toLowerCase().includes(this.currentSearch.toLowerCase()) ||
                article.tags.some(tag => tag.toLowerCase().includes(this.currentSearch.toLowerCase()));
            
            return categoryMatch && searchMatch;
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        this.totalPages = Math.ceil(this.filteredArticles.length / this.articlesPerPage);
        this.currentPage = 1; // –°–±—Ä–æ—Å –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª–æ–≥–∞
    renderBlog() {
        const blogContainer = document.querySelector('.blog__articles');
        if (!blogContainer) return;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const startIndex = (this.currentPage - 1) * this.articlesPerPage;
        const endIndex = startIndex + this.articlesPerPage;
        const currentArticles = this.filteredArticles.slice(startIndex, endIndex);

        if (currentArticles.length === 0) {
            blogContainer.innerHTML = this.renderEmptyState();
        } else {
            const articlesHTML = currentArticles.map(article => this.renderArticleCard(article)).join('');
            blogContainer.innerHTML = articlesHTML;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        this.renderPagination();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç—å–∏
    renderArticleCard(article) {
        const formattedDate = this.formatDate(article.date, article.isPlaceholder);
        const tagsHTML = article.tags.map(tag => `<span class="blog-card__tag">${tag}</span>`).join('');
        
        const cardClass = article.isPlaceholder ? 'blog-card blog-card--placeholder' : 'blog-card';
        const linkHref = article.isPlaceholder ? '#' : `${article.slug}/`;
        const linkClass = article.isPlaceholder ? 'blog-card__placeholder-text' : 'blog-card__title-link';
        const arrow = article.isPlaceholder ? '‚è≥' : '‚Üí';

        return `
            <article class="${cardClass}">
                <div class="blog-card__content">
                    <div class="blog-card__meta">
                        <time class="blog-card__date">${formattedDate}</time>
                        <span class="blog-card__read-time">${article.readTime}</span>
                    </div>
                    
                    <h3 class="blog-card__title">
                        ${article.isPlaceholder ? 
                            `<span class="${linkClass}">
                                ${article.title}
                                <span class="blog-card__arrow">${arrow}</span>
                            </span>` :
                            `<a href="${linkHref}" class="${linkClass}">
                                ${article.title}
                                <span class="blog-card__arrow">${arrow}</span>
                            </a>`
                        }
                    </h3>
                    
                    <p class="blog-card__excerpt">${article.excerpt}</p>
                    
                    <div class="blog-card__tags">
                        ${tagsHTML}
                    </div>
                </div>
            </article>
        `;
    }

    // –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    renderEmptyState() {
        return `
            <div class="blog__empty">
                <div class="blog__empty-icon">üîç</div>
                <h3>–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
            </div>
        `;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    renderPagination() {
        const paginationContainer = document.querySelector('.blog__pagination');
        if (!paginationContainer || this.totalPages <= 1) {
            if (paginationContainer) paginationContainer.style.display = 'none';
            return;
        }

        paginationContainer.style.display = 'flex';

        let paginationHTML = '';

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if (this.currentPage > 1) {
            paginationHTML += `
                <button class="blog-pagination__btn" data-page="${this.currentPage - 1}">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            `;
        }

        // –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
        for (let i = 1; i <= this.totalPages; i++) {
            const isActive = i === this.currentPage ? ' blog-pagination__btn--active' : '';
            paginationHTML += `
                <button class="blog-pagination__btn${isActive}" data-page="${i}">
                    ${i}
                </button>
            `;
        }

        // –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if (this.currentPage < this.totalPages) {
            paginationHTML += `
                <button class="blog-pagination__btn" data-page="${this.currentPage + 1}">
                    –í–ø–µ—Ä–µ–¥ ‚Üí
                </button>
            `;
        }

        paginationContainer.innerHTML = `
            <div class="blog-pagination">
                ${paginationHTML}
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        paginationContainer.querySelectorAll('.blog-pagination__btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const page = parseInt(e.target.dataset.page);
                if (page && page !== this.currentPage) {
                    this.currentPage = page;
                    this.renderBlog();
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Å—Ç–∞—Ç–µ–π
                    document.querySelector('.blog-main').scrollIntoView({ 
                        behavior: 'smooth' 
                    });
                }
            });
        });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const categoryButtons = document.querySelectorAll('.blog-category-btn');
        categoryButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                categoryButtons.forEach(b => b.classList.remove('blog-category-btn--active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
                e.target.classList.add('blog-category-btn--active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                this.currentCategory = e.target.dataset.category;
                this.filterArticles();
                this.renderBlog();
            });
        });

        // –ü–æ–∏—Å–∫
        const searchInput = document.getElementById('blogSearch');
        const searchBtn = document.querySelector('.blog-search__btn');
        
        const performSearch = () => {
            this.currentSearch = searchInput.value.trim();
            this.filterArticles();
            this.renderBlog();
        };

        searchInput.addEventListener('input', performSearch);
        searchBtn.addEventListener('click', performSearch);
        
        // –ü–æ–∏—Å–∫ –ø–æ Enter
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                performSearch();
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStats() {
        const articlesCountElement = document.getElementById('articlesCount');
        if (articlesCountElement) {
            const realArticlesCount = this.articles.filter(article => !article.isPlaceholder).length;
            articlesCountElement.textContent = realArticlesCount;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(date, isPlaceholder = false) {
        const now = new Date();
        const diffDays = Math.floor((date - now) / (1000 * 60 * 60 * 24));
        
        if (isPlaceholder) {
            // –î–ª—è –∑–∞–≥–ª—É—à–µ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ X –¥–Ω–µ–π"
            if (diffDays <= 0) {
                return '–°–∫–æ—Ä–æ';
            } else if (diffDays === 1) {
                return '–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ –∑–∞–≤—Ç—Ä–∞';
            } else if (diffDays < 7) {
                return `–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ ${diffDays} –¥–Ω—è`;
            } else if (diffDays < 30) {
                const weeks = Math.floor(diffDays / 7);
                return `–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ ${weeks} ${weeks === 1 ? '–Ω–µ–¥–µ–ª—é' : '–Ω–µ–¥–µ–ª–∏'}`;
            } else {
                const months = Math.floor(diffDays / 30);
                return `–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ ${months} ${months === 1 ? '–º–µ—Å—è—Ü' : '–º–µ—Å—è—Ü–∞'}`;
            }
        } else {
            // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            const pastDiffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));
            
            if (pastDiffDays === 0) {
                return '–°–µ–≥–æ–¥–Ω—è';
            } else if (pastDiffDays === 1) {
                return '–í—á–µ—Ä–∞';
            } else if (pastDiffDays < 7) {
                return `${pastDiffDays} –¥–Ω—è –Ω–∞–∑–∞–¥`;
            } else {
                return date.toLocaleDateString('ru-RU', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
            }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    addArticle(article) {
        this.articles.unshift(article); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
        this.articles.sort((a, b) => b.date - a.date); // –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º
        this.filterArticles();
        this.renderBlog();
        this.updateStats();
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: ${article.title}`);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    const blogManager = new BlogPageManager();
    blogManager.init();
    
    // –î–µ–ª–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
    window.blogPageManager = blogManager;
});
