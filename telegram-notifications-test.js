// –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// Telegram Bot Configuration
const TELEGRAM_CONFIG = {
    // API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Bot Token
    apiEndpoint: 'https://skhlebnikov.ru/api/get-telegram-key',
    // Chat ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    chatId: '152423085',
    // –ö—ç—à –¥–ª—è Bot Token
    botToken: null
};

// –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NOTIFICATIONS_ENABLED = true; // –í–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

/**
 * –ü–æ–ª—É—á–∞–µ—Ç Bot Token —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Promise<string|null>} - Bot Token –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function getTelegramBotToken() {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (TELEGRAM_CONFIG.botToken) {
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Bot Token');
        return TELEGRAM_CONFIG.botToken;
    }

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º Bot Token —Å —Å–µ—Ä–≤–µ—Ä–∞...');
    
    try {
        const response = await fetch(TELEGRAM_CONFIG.apiEndpoint);
        
        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:', response.status, response.statusText);
            return null;
        }

        const data = await response.json();
        console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
        
        if (data.apiKey) {
            TELEGRAM_CONFIG.botToken = data.apiKey;
            console.log('‚úÖ Bot Token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞');
            // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö
            const maskedToken = data.apiKey.substring(0, 10) + '...' + data.apiKey.substring(data.apiKey.length - 10);
            console.log('üîë –¢–æ–∫–µ–Ω (—á–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã—Ç):', maskedToken);
            return data.apiKey;
        } else {
            console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
        return null;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Promise<boolean>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
 */
async function sendTelegramMessage(message) {
    if (!NOTIFICATIONS_ENABLED) {
        console.log('üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', message);
        return false;
    }

    // –ü–æ–ª—É—á–∞–µ–º Bot Token —Å —Å–µ—Ä–≤–µ—Ä–∞
    const botToken = await getTelegramBotToken();
    
    if (!botToken) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Bot Token');
        return false;
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    
    const payload = {
        chat_id: TELEGRAM_CONFIG.chatId,
        text: message,
        parse_mode: 'HTML'
    };

    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Telegram API...');
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        if (response.ok) {
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
            return true;
        } else {
            const error = await response.json();
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
        return false;
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ë–ª–æ–≥"
 */
async function notifyBlogButtonClick() {
    const timestamp = new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const userAgent = navigator.userAgent;
    const screenInfo = `${screen.width}x${screen.height}`;
    const referrer = document.referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥';

    const message = `üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞</b>\n\n` +
                   `üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–ª–æ–≥"\n` +
                   `üïê –í—Ä–µ–º—è: ${timestamp}\n` +
                   `üåê URL: ${window.location.href}\n` +
                   `üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: ${screenInfo}\n` +
                   `üîó –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª: ${referrer}\n` +
                   `üë§ –ë—Ä–∞—É–∑–µ—Ä: ${userAgent.substring(0, 100)}...`;

    console.log('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:', message);
    await sendTelegramMessage(message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞—Å—Ö–∞–ª–∫–∏
 */
async function notifyEasterEggActivation() {
    const timestamp = new Date().toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const userAgent = navigator.userAgent;
    const screenInfo = `${screen.width}x${screen.height}`;
    const referrer = document.referrer || '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥';

    const message = `ü•ö <b>–ü–ê–°–•–ê–õ–ö–ê –ù–ê–ô–î–ï–ù–ê!</b>\n\n` +
                   `üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø–∞—Å—Ö–∞–ª–∫—É –Ω–∞ —Å–∞–π—Ç–µ!\n` +
                   `üïê –í—Ä–µ–º—è: ${timestamp}\n` +
                   `üåê URL: ${window.location.href}\n` +
                   `üì± –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: ${screenInfo}\n` +
                   `üîó –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª: ${referrer}\n` +
                   `üéÆ –°–ø–æ—Å–æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: 5 –∫–ª–∏–∫–æ–≤ –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é —Ç–µ–º—ã\n` +
                   `üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç!\n` +
                   `üë§ –ë—Ä–∞—É–∑–µ—Ä: ${userAgent.substring(0, 100)}...`;

    console.log('ü•ö –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Å—Ö–∞–ª–∫–µ –≤ Telegram:', message);
    await sendTelegramMessage(message);
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
function showPageNotification() {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 15px 20px;
        border-radius: 5px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        z-index: 10000;
        font-family: Arial, sans-serif;
        max-width: 300px;
    `;
    notification.innerHTML = `
        <strong>‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!</strong><br>
        –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ë–ª–æ–≥" –æ—Ç—Å–ª–µ–∂–µ–Ω.<br>
        <small>–í—Ä–µ–º—è: ${new Date().toLocaleTimeString()}</small>
    `;
    
    document.body.appendChild(notification);
    
    // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–ª–æ–≥"
 */
function initBlogButtonTracking() {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    document.addEventListener('DOMContentLoaded', function() {
        const blogButton = document.querySelector('.blog-button');
        
        if (blogButton) {
            console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ë–ª–æ–≥":', blogButton);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            blogButton.addEventListener('click', async function(event) {
                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
                event.preventDefault();
                
                console.log('üìù –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ë–ª–æ–≥" - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                showPageNotification();
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                await notifyBlogButtonClick();
                
                // –ß–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                setTimeout(() => {
                    console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–ª–æ–≥–∞...');
                    window.location.href = blogButton.href;
                }, 1500); // –£–≤–µ–ª–∏—á–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1.5 —Å–µ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            });
            
            console.log('‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ë–ª–æ–≥" –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            console.log('üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–ª–æ–≥" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        } else {
            console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ "–ë–ª–æ–≥" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
initBlogButtonTracking();

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞—Å—Ö–∞–ª–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ
window.notifyEasterEggActivation = notifyEasterEggActivation;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        getTelegramBotToken,
        sendTelegramMessage,
        notifyBlogButtonClick,
        notifyEasterEggActivation,
        initBlogButtonTracking,
        showPageNotification
    };
}
